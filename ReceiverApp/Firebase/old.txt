
// Requirements for stripe
const { Logging } = require('@google-cloud/logging');
const logging = new Logging({
  projectId: process.env.GCLOUD_PROJECT,
});

const { Stripe } = require('stripe');
const { ref } = require("firebase-functions/lib/providers/database");
const stripe = new Stripe(functions.config().stripe.secret, {
  apiVersion: '2020-08-27',
});





// Function for creating a stripe customer when a new customer is created
exports.createStripeCustomer = functions.auth.user().onCreate(async (user) => {
    
    const customer = await stripe.customers.create({ email: user.email });
    const intent = await stripe.setupIntents.create({
        customer: customer.id,
    });
    
    await admin.firestore.collection("strpie_customers").doc(user.uid).set({
        customer_id: customer.id,
        setup_secret: intent.client_secret,
    });
    return
});

// Function to retrieve the payment method details
exports.addPaymentMethodDetails = functions.firestore
    .document("/stripe_customers/{userId}/payment_methods/{pushId}")
    .onCreate(async (snap, context) => {
        try{
            
            const paymentMethodId = snap.data().id;
            const paymentMethod = await stripe.paymentMethods.retrieve(
                paymentMethodId,
            );

            await snap.ref.set(paymentMethod);

            const intent = await stripe.setupIntents.create({
                customer: `${paymentMethod.customer}`,
            });

            await snap.ref.parent.set(
                {
                    setuup_secret: intent.client_secret,
                },
                { merge: true}
            );

            return;

        }catch (error){
            
            await snap.ref.set({ error: userFacingMessage(error) }, { merge: true });
            await reportError(error, { user: context.params.userId });

        }

    });

// When a payment document is written, trigger funciton to create the payment in stripe
exports.createStripePayment = functions.firestore
    .document("stripe_customers/{userID}/payments/{pushId}")
    .onCreate(async (snap, context) => {
        try {
            // Look up the customer
            const { amount, currency, payment_method } = snap.data().customer_id;
            // Create a charge using the pushIdas the idempotency key
            // to protect against double charges 
            const idempotencyKey = context.params.pushId;
            const payment = await stripe.paymentIntents.create(
                {
                    amount,
                    currency,
                    customer,
                    payment_method,
                    off_session: false,
                    confirm: true,
                    confirmation_method: "manual",
                },
                { idempotencyKey }
            );

            // If the result is successful, write it back to the database 
            await snap.ref.set(payment);

        } catch (error) {
            // We want to capture errors and render them in a user-friendly way, while
            // still logging an exception with StackDriver
            console.log(error);
            await snap.ref.set({ error: userFacingMessage(error) }, { merge: true });
            await reportError(error, { user: context.params.userId });
        }
        
    });

// Function to confirm the payment after authentication 
exports.confirmStripePayment = functions.firestore
    .document("stripe_customers/{userId}/payments/{pushId}")
    .onUpdate(async (change, context) => {
        if (change.after.data().status === "requires_confirmation") {
            const payment = await stripe.paymentIntents.confirm(
                change.after.data().id
            );
            change.after.ref.set(payment);
        }
    });

// Function for when a user deletes their account 
exports.cleanupUser = functions.auth.user().onDelete(async (user) => {
    const dbRef = admin.firestore().collection("stripe_customers");
    const customer = (await dbRef.doc(user.uid).get()).data();
    await stripe.customers.del(customer.customer_id);
    // Delete the customers payments and payment methods in firestore 
    const batch = admin.firestore().batch();
    const paymentsMethodsSnapshot = await dbRef
        .doc(user.uid)
        .collection("payment_methods")
        .get();
    paymentsMethodsSnapshot.forEach((snap) => batch.delete(snap.ref));
    const paymentsSnapshot = await dbRef
        .doc(user.uid)
        .collection("payments")
        .get();
    paymentsSnapshot.forEach((snap) => batch.delete(snap.ref));

    await batch.commit();

    await dbRef.doc(user.uid).delete();

    return;
});

// Error handling 
function reportError(err, context = {}) {
    const logName = "errors";
    const log = logging.log(logName);

    const metadata = {
        resource: {
            type: "cloud_function",
            labels: { function_name: process.env.FUNCTION_NAME },
        },
    };

    const errorEvent = {
        message: err.stack,
        serviceContext: {
            service: process.env.FUNCTION_NAME,
            resourceType: "cloud_function",
        },
        context: context,
    };

    return new Promise((resolve, reject) => {
        log.write(log.entry(metadata, errorEvent), (error) => {
            if (error) {
                return reject(error);
            }
            return resolve();
        });
    });
}

// Clean up the error message for the user 
function userFacingMessage(error) {
    return error.type
    ? error.message
    : "An error occured, developers have been alerted.";
}
